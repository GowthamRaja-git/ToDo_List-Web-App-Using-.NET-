@model IEnumerable<TodoListApp.Models.Todo>

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>@ViewData["Title"]</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f8f9fa;
                color: #333;
                margin: 0;
                padding: 0;
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
            }

            h1 {
                text-align: center;
                color: #4CAF50;
                margin-bottom: 20px;
            }

            #todo-list {
                list-style: none;
                padding: 0;
                margin: 0;
            }

            .list-group-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 15px;
                margin-bottom: 10px;
                background-color: #ffffff;
                border: 1px solid #ddd;
                border-radius: 4px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

                .list-group-item span {
                    flex: 1;
                }

                .list-group-item div {
                    display: flex;
                    gap: 10px;
                }

            .btn {
                padding: 8px 12px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                color: #fff;
                transition: background-color 0.3s ease-in-out;
            }

            .btn-sm {
                padding: 6px 10px;
                font-size: 12px;
            }

            .btn-success {
                background-color: #28a745;
            }

                .btn-success:hover {
                    background-color: #218838;
                }

            .btn-warning {
                background-color: #ffc107;
                color: #212529;
            }

                .btn-warning:hover {
                    background-color: #e0a800;
                }

            .btn-danger {
                background-color: #dc3545;
            }

                .btn-danger:hover {
                    background-color: #c82333;
                }

            .btn-info {
                background-color: #17a2b8;
            }

                .btn-info:hover {
                    background-color: #138496;
                }

            .list-group-item span.done {
                text-decoration: line-through;
                color: #6c757d;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>@ViewData["Title"]</h1>

            <!-- Render the form using a partial view -->
            @await Html.PartialAsync("_TodoForm", new TodoListApp.Models.Todo { Task = "Default Task" })

            <!-- Display list of todos -->
            <ul id="todo-list" class="list-group">
                @foreach (var todo in Model)
        {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span class="@(todo.Done ? "done" : "")">@todo.Task</span>
                    <span>@todo.DeadlineDate?.ToShortDateString() @todo.DeadlineTime?.ToString(@"hh\:mm")</span>
                    <div>
                        <button onclick="toggleDone('@todo.Id')" class="btn btn-sm btn-success">
                            @if (todo.Done)
                        {
                            <text>Undo</text>
                        }
                        else
                        {
                            <text>Done</text>
                        }
                        </button>
                        <button onclick="editTask('@todo.Id', '@todo.Task', '@todo.DeadlineDate?.ToString(" yyyy-MM-dd")', '@todo.DeadlineTime?.ToString(@"hh\:mm")' )" class="btn btn-sm btn-warning">Edit</button>
                        <button onclick="deleteTask('@todo.Id')" class="btn btn-sm btn-danger">Delete</button>
                        <button onclick="assignTask('@todo.Id', '@todo.Task', '@todo.DeadlineDate?.ToString(" yyyy-MM-dd")', '@todo.DeadlineTime?.ToString(@"hh\:mm")' )" class="btn btn-sm btn-info">Assign</button>
                    </div>
                </li>
                }
            </ul>
        </div>

        <script>
            function toggleDone(id) {
                fetch(`/Home/ToggleDone/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            location.reload();
                        } else {
                            alert('Failed to toggle task status');
                        }
                    });
            }

            function deleteTask(id) {
                if (confirm('Are you sure you want to delete this task?')) {
                    fetch(`/Home/Delete/${id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                        .then(response => {
                            if (response.ok) {
                                location.reload();
                            } else {
                                alert('Failed to delete task');
                            }
                        });
                }
            }

            function assignTask(id, task, deadlineDate, deadlineTime) {
                var email = prompt('Enter email to assign this task:');
                if (email) {
                    fetch(`/Home/Assign`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ id, email, task, deadlineDate, deadlineTime })
                    })
                        .then(response => response.json())
                        .then(data => alert('Task assigned and email sent successfully!'))
                        .catch(err => alert('Failed to assign task and send email'));
                }
            }

            function editTask(id, task, deadlineDate, deadlineTime) {
                document.getElementById("Task").value = task;
                document.getElementById("DeadlineDate").value = deadlineDate;
                document.getElementById("DeadlineTime").value = deadlineTime;
                document.getElementById("add-form").action = '/Home/Edit/' + id;
                document.querySelector('button[type="submit"]').textContent = 'Update';
            }
        </script>
    </body>
</html>
